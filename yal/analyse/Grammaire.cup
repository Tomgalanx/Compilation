package Compilation.yal.analyse ;

import java.util.*;
import Compilation.yal.arbre.Variables.*;
import Compilation.yal.arbre.expressions.*;
import Compilation.yal.arbre.expressions.Binaire.Arithmetique.*;
import Compilation.yal.arbre.expressions.Binaire.Booleen.*;
import Compilation.yal.arbre.expressions.constante.*;
import Compilation.yal.arbre.expressions.Unaire.*;
import Compilation.yal.arbre.ArbreAbstrait;
import Compilation.yal.arbre.BlocDInstructions;
import Compilation.yal.arbre.expressions.constante.ConstanteEntiere;
import Compilation.yal.arbre.expressions.Expression;
import Compilation.yal.arbre.expressions.IDF;
import Compilation.yal.arbre.instructions.*;
import Compilation.yal.arbre.instructions.Affectation;
import Compilation.yal.arbre.instructions.Declaration;
import Compilation.yal.arbre.instructions.Ecrire;
import Compilation.yal.arbre.instructions.Lire;
import Compilation.yal.arbre.instructions.Boucle;
import Compilation.yal.exceptions.AnalyseSyntaxiqueException;
import Compilation.yal.arbre.TDS;
import Compilation.yal.arbre.Variables.EntreeFonction;
import Compilation.yal.arbre.Variables.SymboleFonction;
import Compilation.yal.arbre.FabriqueEtiquette;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    PROGRAMME, DEBUT, FIN, POINTVIRGULE, ECRIRE,ENTIER,EGALE,LIRE,MULT,DIV,MOINS,PLUS,ET,OU,DIFFERENT,TANTQUE,REPETER,FINTANTQUE,DOUBLEEGALE,NON,INFERIEUR,SUPERIEUR,PAROUV,PARFER,ALORS,FINSI,SI,SINON,FONCTION,RETOURNE,DEBUT_FONCTION;
terminal String    IDF, CSTENTIERE;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait PROG, INST,ENTETE;
non terminal BlocDInstructions LINST;
non terminal Instruction DECL_VAR,AFFECT,BOUCLE,CONDITION,DECL_FONC,BLOC;
non terminal Expression EXP ;
non terminal Integer PARAMETER,DECL_PAR;
non terminal ArrayList<Expression> LISTEPARA;


precedence left ET,OU;
precedence left DIFFERENT,DOUBLEEGALE;
precedence left INFERIEUR,SUPERIEUR;
precedence left PLUS,MOINS;
precedence left MULT,DIV;
precedence left NON;

/* ----------------------------Grammar Section-------------------- */
 
start with PROG ;


PROG    ::=     PROGRAMME  IDF:i  DEBUT  LINST:li  FIN
                {:
                RESULT = li ;

                :}
                ;


LINST   ::=     LINST:li  INST:i
                {: ((BlocDInstructions)li).ajouter(i) ;
                   RESULT = li ; :}
        |
                INST:i
                {: BlocDInstructions b = new BlocDInstructions(ileft + 1) ;
                   b.ajouter(i) ;
                   RESULT = b ; :}
                ;

INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}

         |      DECL_VAR:e POINTVIRGULE
                {: RESULT = e; :}
         |
                AFFECT:e POINTVIRGULE
                {: RESULT = e; :}

         |      LIRE IDF:i POINTVIRGULE
                {: RESULT = new Lire(ileft,i); :}

         |      BOUCLE:e
                {: RESULT = e; :}

        |      CONDITION:e
               {: RESULT = e; :}

        |       DECL_FONC:e
                {: RESULT =e;:}

        |       RETOURNE EXP:e POINTVIRGULE
                {:
                RESULT = new RetourneFonction(eleft,e); :}
         ;
    
EXP    ::=     CSTENTIERE:c
                {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}

                | IDF :i
                {: RESULT = new IDF(ileft, i); :}

                | EXP:e1 PLUS EXP:e2
                {: RESULT = new Addition(e1left,e1,e2); :}

                |  EXP:e1 MOINS EXP:e2
                {: RESULT = new Soustraction(e1left,e1,e2); :}

                |  EXP:e1 DIV EXP:e2
                {: RESULT = new Division(e1left,e1,e2); :}

                |  EXP:e1 MULT EXP:e2
                {: RESULT = new Multiplication(e1left,e1,e2); :}

                |  MOINS EXP:c
                {: RESULT = new ConstanteEntiere("-"+c, cleft + 1); :}

                |  EXP:e1 SUPERIEUR EXP:e2
                {: RESULT = new Superieur(e1left,e1,e2); :}

                |  EXP:e1 INFERIEUR EXP:e2
                {: RESULT = new Inferieur(e1left,e1,e2); :}

                |  EXP:e1 DOUBLEEGALE EXP:e2
                {: RESULT = new DoubleEgale(e1left,e1,e2); :}

                |  EXP:e1 DIFFERENT EXP:e2
                {: RESULT = new Different(e1left,e1,e2); :}

                |  EXP:e1 ET EXP:e2
                {: RESULT = new EtLogique(e1left,e1,e2); :}

                |  EXP:e1 OU EXP:e2
                {: RESULT = new OuLogique(e1left,e1,e2); :}

                |  NON EXP:e
                {: RESULT = new NotLogique(eleft,e); :}

                | PAROUV EXP:e PARFER
                {: RESULT = e ;:}

                | IDF:i PAROUV PARFER
                {: RESULT = new AppelDeFonction(ileft,i); :}

                | IDF:i PAROUV LISTEPARA:par PARFER
                {:RESULT = new AppelDeFonction(ileft,i,par); :}
               ;


LISTEPARA    ::=    LISTEPARA:par POINTVIRGULE EXP:exp
                  {: par.add(exp);
		             RESULT = par;
		          :}
           |
                  EXP:exp
                  {: ArrayList<Expression> par = new ArrayList<>();
                     par.add(exp);
		             RESULT = par;
                  :}
                  ;


DECL_VAR    ::= ENTIER IDF:i
            {: RESULT = new Declaration(ileft,i);:}
            ;


DECL_FONC   ::= ENTETE IDF:i PAROUV PARFER DEBUT LINST:li FIN
                {:


                    TDS.getInstance().sortirBloc();
                    RESULT = new Fonction(i,li,0);

                 :}
                 |

                 ENTETE IDF:i PAROUV PARAMETER:p PARFER DEBUT LINST:li FIN
                  {:
                  TDS.getInstance().sortirBloc();
                  RESULT = new Fonction(i,li,p);
                   :};


ENTETE         ::= FONCTION
        {:
                    TDS.getInstance().entreeBloc();
        :};



PARAMETER    ::=    DECL_PAR POINTVIRGULE PARAMETER:nb
                   {: RESULT = nb + 1; :}
            |
                   DECL_PAR
                   {: RESULT = 1; :}
                   ;

DECL_PAR    ::=    ENTIER:t IDF:idf
                   {:
                   EntreeVariable e = new EntreeVariable(idf, tleft);
                   SymboleParametre s = new SymboleParametre( TDS.getInstance().getZoneVariable(),TDS.getInstance().getNumeroBloc());
                    TDS.getInstance().ajouter(e, s);
                    System.out.println("para ajouté");
                   :}
                   ;




AFFECT      ::= IDF:i EGALE EXP:e
            {: RESULT = new Affectation(ileft,i,e); :}
            ;


BOUCLE      ::= TANTQUE EXP:e REPETER LINST:li FINTANTQUE
            {: RESULT = new Boucle(eleft,e,li); :}
            ;

CONDITION    ::= SI EXP:e ALORS LINST:l1 SINON LINST:l2 FINSI
            {: RESULT=new SI(e,l1,l2); :}

            |   SI EXP:e ALORS LINST:l1 FINSI
            {: RESULT=new SI(e,l1,null); :}


            |   SI EXP:e ALORS FINSI
            {: RESULT=new SI(e,null,null); :}


            |   SI EXP:e ALORS SINON LINST:l2 FINSI
            {: RESULT=new SI(e,null,l2); :}


            |   SI EXP:e ALORS SINON FINSI
            {: RESULT=new SI(e,null,null); :}

            ;